{"version":3,"sources":["component/chatapp.js","store/chatReducers.js","store/store.js","App.js","serviceWorker.js","index.js"],"names":["socket","initialData","general","from","msg","topic2","allReducers","combineReducers","chatReducers","state","action","type","payload","topic","store","createStore","compose","window","__REDUX_DEVTOOLS_EXTENSION__","useStyles","makeStyles","theme","root","margin","padding","spacing","flex","display","alignItems","topicWindow","width","height","borderRight","chatWindow","chatBox","button","connect","chatData","props","console","log","classes","allChat","Object","keys","useState","activeTopic","setactiveTopic","value","changeValue","setchangeValue","undefined","io","on","dispatch","user","Math","random","toFixed","Paper","className","Typography","variant","component","gutterBottom","List","map","i","ListItem","onClick","e","target","innerText","ListItemText","primary","chat","Chip","label","chip","TextField","onChange","evt","changeTextValue","Button","color","emit","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ab3d9c83.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { connect } from \"react-redux\";\r\nimport io from \"socket.io-client\";\r\nimport {store} from './../store/store'\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    margin: \"50px\",\r\n    padding: theme.spacing(3, 2),\r\n  },\r\n  flex: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n  },\r\n  topicWindow: { width: \"30%\", height: \"300px\", borderRight: \"1px solid grey\" },\r\n  chatWindow: { width: \"70%\", height: \"300px\", padding: \"20px\" },\r\n  chatBox: { width: \"85%\" },\r\n  button: { width: \"15%\" },\r\n}));\r\nlet socket;\r\nconst Chatapp = (props) => {\r\n  console.log(props.chatData);\r\n  const classes = useStyles();\r\n  const allChat = Object.keys(props.chatData);\r\n  const [activeTopic, setactiveTopic] = useState(allChat[0]);\r\n  const [changeValue, setchangeValue] = useState({ value: \"\" });\r\n  const changeTextValue = (evt) => {\r\n    setchangeValue({ ...changeValue, value: evt.target.value });\r\n  };\r\n  \r\n \r\n  const sendChatValue = (value) => {\r\n    socket.emit(\"chat message\", value);\r\n  };\r\n  if (socket === undefined) {\r\n    socket = io(\":7000\");\r\n    socket.on('chat message', function(msg){\r\n      console.log(msg)\r\n     store.dispatch({\r\n        type:'Received_message',\r\n        payload:msg\r\n      })\r\n    });\r\n  }\r\n  const user = 'username' + Math.random(100).toFixed(2)\r\n  console.log(allChat);\r\n  console.log(changeValue.value);\r\n  return (\r\n    <div>\r\n      <Paper className={classes.root}>\r\n        <Typography variant=\"h3\" component=\"h3\" gutterBottom>\r\n          Chat app\r\n        </Typography>\r\n        <Typography variant=\"h5\" component=\"h5\" gutterBottom>\r\n          {activeTopic}\r\n        </Typography>\r\n        <div className={classes.flex}>\r\n          <div className={classes.topicWindow}>\r\n            <List>\r\n              {allChat.map((topic, i) => {\r\n                return (\r\n                  <ListItem\r\n                    onClick={(e) => {\r\n                      setactiveTopic(e.target.innerText);\r\n                    }}\r\n                    button\r\n                  >\r\n                    <ListItemText primary={topic} />\r\n                  </ListItem>\r\n                );\r\n              })}\r\n            </List>\r\n          </div>\r\n          <div className={classes.chatWindow}>\r\n            {props.chatData[activeTopic].map((chat) => {\r\n              console.log(chat);\r\n              return (\r\n                <div className={classes.flex}>\r\n                  <Chip label={chat.from} className={classes.chip} />\r\n                  <Typography variant=\"body1\" gutterBottom>\r\n                    {chat.msg}\r\n                  </Typography>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n        <div className={classes.flex}>\r\n          <TextField\r\n            label=\"send a chat\"\r\n            className={classes.chatBox}\r\n            onChange={(evt) => changeTextValue(evt)}\r\n            value={changeValue.value}\r\n          />\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={() => {\r\n              sendChatValue({from:user,msg:changeValue.value,topic:activeTopic});\r\n              setchangeValue({...changeValue,value:''})\r\n            }}\r\n          >\r\n            send\r\n          </Button>\r\n        </div>\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\nconst mapStateToprops = (state) => {\r\n  return {\r\n    chatData: state.chatReducers,\r\n  };\r\n};\r\nexport default connect(mapStateToprops)(Chatapp);\r\n","let initialData = {\r\n  general: [\r\n    { from: \"ali\", msg: \"hi\" },\r\n    { from: \"umer\", msg: \"hi\" },\r\n  ],\r\n  topic2: [\r\n    { from: \"ali\", msg: \"hello\" },\r\n    { from: \"usman\", msg: \"hi\" },\r\n  ],\r\n};\r\nexport const chatReducers = (state = initialData, action) => {\r\n  //   debugger;\r\n    // const { from, msg, topic } = action;\r\n  switch (action.type) {\r\n    case \"Received_message\":\r\n      return {\r\n        ...state,\r\n        [action.payload.topic]: [\r\n          ...state[action.payload.topic],\r\n          {\r\n            from:action.payload.from,\r\n            msg:action.payload.msg,\r\n          },\r\n        ],\r\n      };\r\n  }\r\n  return state;\r\n};\r\n","import { createStore, compose,combineReducers } from \"redux\";\r\n\r\n// import { persistStore, persistReducer } from 'redux-persist'\r\n// import storage from 'redux-persist/lib/storage'\r\nimport {chatReducers} from './chatReducers'\r\nlet allReducers = combineReducers({chatReducers})\r\n\r\nexport const store = createStore(\r\n  allReducers,\r\n  compose(\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n  )\r\n);\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Chatapp  from \"./component/chatapp\";\nimport {store} from \"./store/store\";\nimport { Provider } from \"react-redux\";\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <Chatapp />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}